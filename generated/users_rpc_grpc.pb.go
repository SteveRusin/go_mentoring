// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: generated/users_rpc.proto

package users_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserMangment_StoreUser_FullMethodName   = "/users_rpc.UserMangment/StoreUser"
	UserMangment_GetUser_FullMethodName     = "/users_rpc.UserMangment/GetUser"
	UserMangment_UploadImage_FullMethodName = "/users_rpc.UserMangment/UploadImage"
)

// UserMangmentClient is the client API for UserMangment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserMangmentClient interface {
	StoreUser(ctx context.Context, in *StoreUserRequest, opts ...grpc.CallOption) (*StoreUserReply, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (UserMangment_UploadImageClient, error)
}

type userMangmentClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMangmentClient(cc grpc.ClientConnInterface) UserMangmentClient {
	return &userMangmentClient{cc}
}

func (c *userMangmentClient) StoreUser(ctx context.Context, in *StoreUserRequest, opts ...grpc.CallOption) (*StoreUserReply, error) {
	out := new(StoreUserReply)
	err := c.cc.Invoke(ctx, UserMangment_StoreUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMangmentClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, UserMangment_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMangmentClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (UserMangment_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserMangment_ServiceDesc.Streams[0], UserMangment_UploadImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userMangmentUploadImageClient{stream}
	return x, nil
}

type UserMangment_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type userMangmentUploadImageClient struct {
	grpc.ClientStream
}

func (x *userMangmentUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userMangmentUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserMangmentServer is the server API for UserMangment service.
// All implementations must embed UnimplementedUserMangmentServer
// for forward compatibility
type UserMangmentServer interface {
	StoreUser(context.Context, *StoreUserRequest) (*StoreUserReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	UploadImage(UserMangment_UploadImageServer) error
	mustEmbedUnimplementedUserMangmentServer()
}

// UnimplementedUserMangmentServer must be embedded to have forward compatible implementations.
type UnimplementedUserMangmentServer struct {
}

func (UnimplementedUserMangmentServer) StoreUser(context.Context, *StoreUserRequest) (*StoreUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreUser not implemented")
}
func (UnimplementedUserMangmentServer) GetUser(context.Context, *GetUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserMangmentServer) UploadImage(UserMangment_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedUserMangmentServer) mustEmbedUnimplementedUserMangmentServer() {}

// UnsafeUserMangmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserMangmentServer will
// result in compilation errors.
type UnsafeUserMangmentServer interface {
	mustEmbedUnimplementedUserMangmentServer()
}

func RegisterUserMangmentServer(s grpc.ServiceRegistrar, srv UserMangmentServer) {
	s.RegisterService(&UserMangment_ServiceDesc, srv)
}

func _UserMangment_StoreUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMangmentServer).StoreUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMangment_StoreUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMangmentServer).StoreUser(ctx, req.(*StoreUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMangment_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMangmentServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMangment_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMangmentServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMangment_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserMangmentServer).UploadImage(&userMangmentUploadImageServer{stream})
}

type UserMangment_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type userMangmentUploadImageServer struct {
	grpc.ServerStream
}

func (x *userMangmentUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userMangmentUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserMangment_ServiceDesc is the grpc.ServiceDesc for UserMangment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserMangment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users_rpc.UserMangment",
	HandlerType: (*UserMangmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreUser",
			Handler:    _UserMangment_StoreUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserMangment_GetUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _UserMangment_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "generated/users_rpc.proto",
}
